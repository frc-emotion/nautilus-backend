name: "ci / staging"

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write

    env:
      DB_NAME: ${{ secrets.DB_NAME_STAGING }}
      MONGO_URI: ${{ secrets.MONGO_URI_STAGING }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT_STAGING }}
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN_STAGING }}
      JWT_SECRET: ${{ secrets.JWT_SECRET_STAGING }}
      MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY_STAGING }}
      MAILGUN_ENDPOINT: ${{ secrets.MAILGUN_ENDPOINT_STAGING }}
      MAILGUN_FROM_EMAIL: ${{ secrets.MAILGUN_FROM_EMAIL_STAGING }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      APP_MIGRATION_LEAD: ${{ secrets.APP_MIGRATION_LEAD_STAGING }}
      APP_MIGRATION_MEETING: ${{ secrets.APP_MIGRATION_MEETING_STAGING }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.staging
          platforms: linux/amd64
          push: true
          tags: ghcr.io/frc-emotion/staging-nautilus-backend:${{ github.sha }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Create configmap using YAML definition
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: nautilus-config
            namespace: staging
          data:
            ENVIRONMENT: "${{ env.ENVIRONMENT }}"
            DB_NAME: "${{ env.DB_NAME }}"
            MONGO_URI: "${{ env.MONGO_URI }}"
            EXPO_TOKEN: "${{ env.EXPO_TOKEN }}"
            JWT_SECRET: "${{ env.JWT_SECRET }}"
            MAILGUN_API_KEY: "${{ env.MAILGUN_API_KEY }}"
            MAILGUN_ENDPOINT: "${{ env.MAILGUN_ENDPOINT }}"
            MAILGUN_FROM_EMAIL: "${{ env.MAILGUN_FROM_EMAIL }}"
            DISCORD_WEBHOOK: "${{ env.DISCORD_WEBHOOK }}"
            APP_MIGRATION_LEAD: "${{ env.APP_MIGRATION_LEAD }}"
            APP_MIGRATION_MEETING: "${{ env.APP_MIGRATION_MEETING }}"
          EOF

          # Apply Kubernetes manifests from secret
          echo "${{ secrets.KUBE_MANIFESTS }}" | base64 -d | GITHUB_SHA=${{ github.sha }} envsubst | kubectl apply -f -